diff --git a/guava/src/com/google/common/base/Platform.java b/guava/src/com/google/common/base/Platform.java
index 644e89cbfa..137f879603 100644
--- a/guava/src/com/google/common/base/Platform.java
+++ b/guava/src/com/google/common/base/Platform.java
@@ -55,6 +55,7 @@ final class Platform {
     return String.format(Locale.ROOT, "%.4g", value);
   }

+  @SuppressWarnings("StringIsNullOrEmpty")
   static boolean stringIsNullOrEmpty(@CheckForNull String string) {
     return string == null || string.isEmpty();
   }
diff --git a/guava/src/com/google/common/base/Preconditions.java b/guava/src/com/google/common/base/Preconditions.java
index 13ff77b7f7..1d9729951c 100644
--- a/guava/src/com/google/common/base/Preconditions.java
+++ b/guava/src/com/google/common/base/Preconditions.java
@@ -126,6 +126,7 @@ public final class Preconditions {
    * @param expression a boolean expression
    * @throws IllegalArgumentException if {@code expression} is false
    */
+  @SuppressWarnings("CheckArgument")
   public static void checkArgument(boolean expression) {
     if (!expression) {
       throw new IllegalArgumentException();
@@ -140,6 +141,7 @@ public final class Preconditions {
    *     string using {@link String#valueOf(Object)}
    * @throws IllegalArgumentException if {@code expression} is false
    */
+  @SuppressWarnings("CheckArgumentWithMessage")
   public static void checkArgument(boolean expression, @CheckForNull Object errorMessage) {
     if (!expression) {
       throw new IllegalArgumentException(String.valueOf(errorMessage));
@@ -159,6 +161,7 @@ public final class Preconditions {
    *     are converted to strings using {@link String#valueOf(Object)}.
    * @throws IllegalArgumentException if {@code expression} is false
    */
+  @SuppressWarnings("CheckArgumentWithMessage")
   public static void checkArgument(
       boolean expression,
       String errorMessageTemplate,
@@ -175,6 +178,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckArgumentWithMessage")
   public static void checkArgument(boolean b, String errorMessageTemplate, char p1) {
     if (!b) {
       throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));
@@ -267,6 +271,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckArgumentWithMessage")
   public static void checkArgument(
       boolean b, String errorMessageTemplate, char p1, @CheckForNull Object p2) {
     if (!b) {
@@ -281,6 +286,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckArgumentWithMessage")
   public static void checkArgument(boolean b, String errorMessageTemplate, int p1, char p2) {
     if (!b) {
       throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));
@@ -294,6 +300,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckArgumentWithMessage")
   public static void checkArgument(boolean b, String errorMessageTemplate, int p1, int p2) {
     if (!b) {
       throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));
@@ -307,6 +314,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckArgumentWithMessage")
   public static void checkArgument(boolean b, String errorMessageTemplate, int p1, long p2) {
     if (!b) {
       throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));
@@ -320,6 +328,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckArgumentWithMessage")
   public static void checkArgument(
       boolean b, String errorMessageTemplate, int p1, @CheckForNull Object p2) {
     if (!b) {
@@ -334,6 +343,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckArgumentWithMessage")
   public static void checkArgument(boolean b, String errorMessageTemplate, long p1, char p2) {
     if (!b) {
       throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));
@@ -347,6 +357,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckArgumentWithMessage")
   public static void checkArgument(boolean b, String errorMessageTemplate, long p1, int p2) {
     if (!b) {
       throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));
@@ -360,6 +371,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckArgumentWithMessage")
   public static void checkArgument(boolean b, String errorMessageTemplate, long p1, long p2) {
     if (!b) {
       throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));
@@ -373,6 +385,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckArgumentWithMessage")
   public static void checkArgument(
       boolean b, String errorMessageTemplate, long p1, @CheckForNull Object p2) {
     if (!b) {
@@ -387,6 +400,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckArgumentWithMessage")
   public static void checkArgument(
       boolean b, String errorMessageTemplate, @CheckForNull Object p1, char p2) {
     if (!b) {
@@ -401,6 +415,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckArgumentWithMessage")
   public static void checkArgument(
       boolean b, String errorMessageTemplate, @CheckForNull Object p1, int p2) {
     if (!b) {
@@ -415,6 +430,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckArgumentWithMessage")
   public static void checkArgument(
       boolean b, String errorMessageTemplate, @CheckForNull Object p1, long p2) {
     if (!b) {
@@ -429,6 +445,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckArgumentWithMessage")
   public static void checkArgument(
       boolean b, String errorMessageTemplate, @CheckForNull Object p1, @CheckForNull Object p2) {
     if (!b) {
@@ -443,6 +460,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckArgumentWithMessage")
   public static void checkArgument(
       boolean b,
       String errorMessageTemplate,
@@ -461,6 +479,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckArgumentWithMessage")
   public static void checkArgument(
       boolean b,
       String errorMessageTemplate,
@@ -481,6 +500,7 @@ public final class Preconditions {
    * @throws IllegalStateException if {@code expression} is false
    * @see Verify#verify Verify.verify()
    */
+  @SuppressWarnings("CheckState")
   public static void checkState(boolean expression) {
     if (!expression) {
       throw new IllegalStateException();
@@ -497,6 +517,7 @@ public final class Preconditions {
    * @throws IllegalStateException if {@code expression} is false
    * @see Verify#verify Verify.verify()
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(boolean expression, @CheckForNull Object errorMessage) {
     if (!expression) {
       throw new IllegalStateException(String.valueOf(errorMessage));
@@ -518,6 +539,7 @@ public final class Preconditions {
    * @throws IllegalStateException if {@code expression} is false
    * @see Verify#verify Verify.verify()
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(
       boolean expression,
       /*
@@ -543,6 +565,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(boolean b, String errorMessageTemplate, char p1) {
     if (!b) {
       throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1));
@@ -557,6 +580,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(boolean b, String errorMessageTemplate, int p1) {
     if (!b) {
       throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1));
@@ -571,6 +595,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(boolean b, String errorMessageTemplate, long p1) {
     if (!b) {
       throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1));
@@ -585,6 +610,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(boolean b, String errorMessageTemplate, @CheckForNull Object p1) {
     if (!b) {
       throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1));
@@ -599,6 +625,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(boolean b, String errorMessageTemplate, char p1, char p2) {
     if (!b) {
       throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));
@@ -613,6 +640,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(boolean b, String errorMessageTemplate, char p1, int p2) {
     if (!b) {
       throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));
@@ -627,6 +655,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(boolean b, String errorMessageTemplate, char p1, long p2) {
     if (!b) {
       throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));
@@ -641,6 +670,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(
       boolean b, String errorMessageTemplate, char p1, @CheckForNull Object p2) {
     if (!b) {
@@ -656,6 +686,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(boolean b, String errorMessageTemplate, int p1, char p2) {
     if (!b) {
       throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));
@@ -670,6 +701,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(boolean b, String errorMessageTemplate, int p1, int p2) {
     if (!b) {
       throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));
@@ -684,6 +716,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(boolean b, String errorMessageTemplate, int p1, long p2) {
     if (!b) {
       throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));
@@ -698,6 +731,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(
       boolean b, String errorMessageTemplate, int p1, @CheckForNull Object p2) {
     if (!b) {
@@ -713,6 +747,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(boolean b, String errorMessageTemplate, long p1, char p2) {
     if (!b) {
       throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));
@@ -727,6 +762,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(boolean b, String errorMessageTemplate, long p1, int p2) {
     if (!b) {
       throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));
@@ -741,6 +777,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(boolean b, String errorMessageTemplate, long p1, long p2) {
     if (!b) {
       throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));
@@ -755,6 +792,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(
       boolean b, String errorMessageTemplate, long p1, @CheckForNull Object p2) {
     if (!b) {
@@ -770,6 +808,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(
       boolean b, String errorMessageTemplate, @CheckForNull Object p1, char p2) {
     if (!b) {
@@ -785,6 +824,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(
       boolean b, String errorMessageTemplate, @CheckForNull Object p1, int p2) {
     if (!b) {
@@ -800,6 +840,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(
       boolean b, String errorMessageTemplate, @CheckForNull Object p1, long p2) {
     if (!b) {
@@ -815,6 +856,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(
       boolean b, String errorMessageTemplate, @CheckForNull Object p1, @CheckForNull Object p2) {
     if (!b) {
@@ -830,6 +872,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(
       boolean b,
       String errorMessageTemplate,
@@ -849,6 +892,7 @@ public final class Preconditions {
    *
    * @since 20.0 (varargs overload since 2.0)
    */
+  @SuppressWarnings("CheckStateWithMessage")
   public static void checkState(
       boolean b,
       String errorMessageTemplate,
@@ -884,6 +928,7 @@ public final class Preconditions {
    * @see Verify#verifyNotNull Verify.verifyNotNull()
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullStatement")
   public static <T> T checkNotNull(@CheckForNull T reference) {
     if (reference == null) {
       throw new NullPointerException();
@@ -902,6 +947,7 @@ public final class Preconditions {
    * @see Verify#verifyNotNull Verify.verifyNotNull()
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(@CheckForNull T reference, @CheckForNull Object errorMessage) {
     if (reference == null) {
       throw new NullPointerException(String.valueOf(errorMessage));
@@ -925,6 +971,7 @@ public final class Preconditions {
    * @see Verify#verifyNotNull Verify.verifyNotNull()
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T reference,
       String errorMessageTemplate,
@@ -943,6 +990,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(@CheckForNull T obj, String errorMessageTemplate, char p1) {
     if (obj == null) {
       throw new NullPointerException(lenientFormat(errorMessageTemplate, p1));
@@ -958,6 +1006,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(@CheckForNull T obj, String errorMessageTemplate, int p1) {
     if (obj == null) {
       throw new NullPointerException(lenientFormat(errorMessageTemplate, p1));
@@ -973,6 +1022,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(@CheckForNull T obj, String errorMessageTemplate, long p1) {
     if (obj == null) {
       throw new NullPointerException(lenientFormat(errorMessageTemplate, p1));
@@ -988,6 +1038,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T obj, String errorMessageTemplate, @CheckForNull Object p1) {
     if (obj == null) {
@@ -1004,6 +1055,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T obj, String errorMessageTemplate, char p1, char p2) {
     if (obj == null) {
@@ -1020,6 +1072,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T obj, String errorMessageTemplate, char p1, int p2) {
     if (obj == null) {
@@ -1036,6 +1089,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T obj, String errorMessageTemplate, char p1, long p2) {
     if (obj == null) {
@@ -1052,6 +1106,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T obj, String errorMessageTemplate, char p1, @CheckForNull Object p2) {
     if (obj == null) {
@@ -1068,6 +1123,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T obj, String errorMessageTemplate, int p1, char p2) {
     if (obj == null) {
@@ -1084,6 +1140,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T obj, String errorMessageTemplate, int p1, int p2) {
     if (obj == null) {
@@ -1100,6 +1157,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T obj, String errorMessageTemplate, int p1, long p2) {
     if (obj == null) {
@@ -1116,6 +1174,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T obj, String errorMessageTemplate, int p1, @CheckForNull Object p2) {
     if (obj == null) {
@@ -1132,6 +1191,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T obj, String errorMessageTemplate, long p1, char p2) {
     if (obj == null) {
@@ -1148,6 +1208,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T obj, String errorMessageTemplate, long p1, int p2) {
     if (obj == null) {
@@ -1164,6 +1225,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T obj, String errorMessageTemplate, long p1, long p2) {
     if (obj == null) {
@@ -1180,6 +1242,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T obj, String errorMessageTemplate, long p1, @CheckForNull Object p2) {
     if (obj == null) {
@@ -1196,6 +1259,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T obj, String errorMessageTemplate, @CheckForNull Object p1, char p2) {
     if (obj == null) {
@@ -1212,6 +1276,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T obj, String errorMessageTemplate, @CheckForNull Object p1, int p2) {
     if (obj == null) {
@@ -1228,6 +1293,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T obj, String errorMessageTemplate, @CheckForNull Object p1, long p2) {
     if (obj == null) {
@@ -1244,6 +1310,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T obj,
       String errorMessageTemplate,
@@ -1263,6 +1330,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T obj,
       String errorMessageTemplate,
@@ -1283,6 +1351,7 @@ public final class Preconditions {
    * @since 20.0 (varargs overload since 2.0)
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("RequireNonNullWithMessageStatement")
   public static <T> T checkNotNull(
       @CheckForNull T obj,
       String errorMessageTemplate,
@@ -1349,6 +1418,7 @@ public final class Preconditions {
    * @throws IllegalArgumentException if {@code size} is negative
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("CheckElementIndexWithMessage")
   public static int checkElementIndex(int index, int size, String desc) {
     // Carefully optimized for execution by hotspot (explanatory comment above)
     if (index < 0 || index >= size) {
@@ -1394,6 +1464,7 @@ public final class Preconditions {
    * @throws IllegalArgumentException if {@code size} is negative
    */
   @CanIgnoreReturnValue
+  @SuppressWarnings("CheckPositionIndexWithMessage")
   public static int checkPositionIndex(int index, int size, String desc) {
     // Carefully optimized for execution by hotspot (explanatory comment above)
     if (index < 0 || index > size) {
diff --git a/guava/src/com/google/common/base/Strings.java b/guava/src/com/google/common/base/Strings.java
index e56bf1c481..459acbca1a 100644
--- a/guava/src/com/google/common/base/Strings.java
+++ b/guava/src/com/google/common/base/Strings.java
@@ -265,6 +265,7 @@ public final class Strings {
    * @since 25.1
    */
   // TODO(diamondm) consider using Arrays.toString() for array parameters
+  @SuppressWarnings("IdentityConversion")
   public static String lenientFormat(
       @CheckForNull String template, @CheckForNull @Nullable Object... args) {
     template = String.valueOf(template); // null -> "null"
diff --git a/guava/src/com/google/common/graph/UndirectedNetworkConnections.java b/guava/src/com/google/common/graph/UndirectedNetworkConnections.java
index 190897f882..f11f98867c 100644
--- a/guava/src/com/google/common/graph/UndirectedNetworkConnections.java
+++ b/guava/src/com/google/common/graph/UndirectedNetworkConnections.java
@@ -43,6 +43,7 @@ final class UndirectedNetworkConnections<N, E> extends AbstractUndirectedNetwork
     return new UndirectedNetworkConnections<>(HashBiMap.<E, N>create(EXPECTED_DEGREE));
   }

+  @SuppressWarnings("IdentityConversion")
   static <N, E> UndirectedNetworkConnections<N, E> ofImmutable(Map<E, N> incidentEdges) {
     return new UndirectedNetworkConnections<>(ImmutableBiMap.copyOf(incidentEdges));
   }
diff --git a/guava/src/com/google/common/graph/DirectedNetworkConnections.java b/guava/src/com/google/common/graph/DirectedNetworkConnections.java
index e1db65708e..9d70c790ee 100644
--- a/guava/src/com/google/common/graph/DirectedNetworkConnections.java
+++ b/guava/src/com/google/common/graph/DirectedNetworkConnections.java
@@ -44,6 +44,7 @@ final class DirectedNetworkConnections<N, E> extends AbstractDirectedNetworkConn
         HashBiMap.<E, N>create(EXPECTED_DEGREE), HashBiMap.<E, N>create(EXPECTED_DEGREE), 0);
   }

+  @SuppressWarnings("IdentityConversion")
   static <N, E> DirectedNetworkConnections<N, E> ofImmutable(
       Map<E, N> inEdges, Map<E, N> outEdges, int selfLoopCount) {
     return new DirectedNetworkConnections<>(
diff --git a/guava-testlib/src/com/google/common/collect/testing/google/MapGenerators.java b/guava-testlib/src/com/google/common/collect/testing/google/MapGenerators.java
index 35063e815d..3f445ca116 100644
--- a/guava-testlib/src/com/google/common/collect/testing/google/MapGenerators.java
+++ b/guava-testlib/src/com/google/common/collect/testing/google/MapGenerators.java
@@ -60,6 +60,7 @@ public class MapGenerators {

   public static class ImmutableMapCopyOfGenerator extends TestStringMapGenerator {
     @Override
+    @SuppressWarnings("IdentityConversion")
     protected Map<String, String> create(Entry<String, String>[] entries) {
       Map<String, String> builder = Maps.newLinkedHashMap();
       for (Entry<String, String> entry : entries) {
@@ -71,6 +72,7 @@ public class MapGenerators {

   public static class ImmutableMapCopyOfEntriesGenerator extends TestStringMapGenerator {
     @Override
+    @SuppressWarnings("IdentityConversion")
     protected Map<String, String> create(Entry<String, String>[] entries) {
       return ImmutableMap.copyOf(Arrays.asList(entries));
     }
@@ -162,6 +164,7 @@ public class MapGenerators {

   public static class ImmutableMapCopyOfEnumMapGenerator extends TestEnumMapGenerator {
     @Override
+    @SuppressWarnings("IdentityConversion")
     protected Map<AnEnum, String> create(Entry<AnEnum, String>[] entries) {
       EnumMap<AnEnum, String> map = new EnumMap<>(AnEnum.class);
       for (Entry<AnEnum, String> entry : entries) {
diff --git a/guava/src/com/google/common/collect/RegularImmutableSortedSet.java b/guava/src/com/google/common/collect/RegularImmutableSortedSet.java
index 572e0acbf5..fa17e67916 100644
--- a/guava/src/com/google/common/collect/RegularImmutableSortedSet.java
+++ b/guava/src/com/google/common/collect/RegularImmutableSortedSet.java
@@ -324,6 +324,7 @@ final class RegularImmutableSortedSet<E> extends ImmutableSortedSet<E> {
 
   @Override
   ImmutableSortedSet<E> createDescendingSet() {
+    @SuppressWarnings("StaticImport")
     Comparator<? super E> reversedOrder = Collections.reverseOrder(comparator);
     return isEmpty()
         ? emptySet(reversedOrder)
diff --git a/pom.xml b/pom.xml
index 13dd0985d3..30c1060d1c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -22,6 +22,9 @@
     <maven-javadoc-plugin.additionalJOptions></maven-javadoc-plugin.additionalJOptions>
     <maven-source-plugin.version>3.2.1</maven-source-plugin.version>
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    <error-prone.version>v2.19.1-picnic-1</error-prone.version> <java.version>11</java.version>
+    <error-prone-support.version>0.11.2-SNAPSHOT</error-prone-support.version>
+    <maven.compiler.plugin.version>3.11.0</maven.compiler.plugin.version>
   </properties>
   <issueManagement>
     <system>GitHub Issues</system>
@@ -347,50 +350,163 @@
   </dependencyManagement>
   <profiles>
     <profile>
-        <id>sonatype-oss-release</id>
-        <build>
-          <plugins>
-            <plugin>
-              <groupId>org.apache.maven.plugins</groupId>
-              <artifactId>maven-source-plugin</artifactId>
-              <version>${maven-source-plugin.version}</version>
-              <executions>
-                <execution>
-                  <id>attach-sources</id>
-                  <goals>
-                    <goal>jar-no-fork</goal>
-                  </goals>
-                </execution>
-              </executions>
-            </plugin>
-            <plugin>
-              <groupId>org.apache.maven.plugins</groupId>
-              <artifactId>maven-javadoc-plugin</artifactId>
-              <version>${maven-javadoc-plugin.version}</version>
-                <executions>
-                  <execution>
-                    <id>attach-javadocs</id>
-                    <goals>
-                      <goal>jar</goal>
-                    </goals>
-                </execution>
-              </executions>
-            </plugin>
-            <plugin>
-              <groupId>org.apache.maven.plugins</groupId>
-              <artifactId>maven-gpg-plugin</artifactId>
-              <version>1.6</version>
-              <executions>
-                <execution>
-                  <id>sign-artifacts</id>
-                  <phase>verify</phase>
-                  <goals>
-                    <goal>sign</goal>
-                  </goals>
-                </execution>
-              </executions>
-            </plugin>
-          </plugins>
+      <id>error-prone-compile</id>
+      <build>
+        <plugins>
+          <plugin>
+            <groupId>org.apache.maven.plugins</groupId>
+            <artifactId>maven-compiler-plugin</artifactId>
+            <version>${maven.compiler.plugin.version}</version>
+            <executions>
+              <execution>
+                <id>error-prone-compile</id>
+                <phase>compile</phase>
+                <goals>
+                  <goal>compile</goal>
+                </goals>
+                <configuration>
+                  <failOnError>false</failOnError>
+                  <source>1.8</source>
+                  <target>1.8</target>
+                  <compilerArgs>
+                    <arg>-Xpkginfo:always</arg>
+                    <arg>-XDcompilePolicy=simple</arg>
+                    <arg>
+                      -Xplugin:ErrorProne ${error-prone.flags}  -Xep:StaticImport:OFF -Xep:CollectorMutability:OFF -Xep:FluxImplicitBlock:OFF -Xep:ScheduledTransactionTrace:OFF -XepOpt:Refaster:NamePattern=^((?!(Immutable|PrimitiveRules|AssortedRules\$CheckIndex|NullRules\$RequireNonNullElse|MapEntryRules\$MapEntry|OptionalRules\$OptionalOrElseThrow|OptionalRules\$OptionalIsEmpty)).*)
+                    </arg>
+                  </compilerArgs>
+                  <annotationProcessorPaths>
+                    <path>
+                      <groupId>com.github.PicnicSupermarket.error-prone</groupId>
+                      <artifactId>error_prone_core</artifactId>
+                      <version>${error-prone.version}</version>
+                    </path>
+                    <path>
+                      <groupId>tech.picnic.error-prone-support</groupId>
+                      <artifactId>error-prone-contrib</artifactId>
+                      <version>${error-prone-support.version}</version>
+                    </path>
+                    <path>
+                      <groupId>tech.picnic.error-prone-support</groupId>
+                      <artifactId>refaster-runner</artifactId>
+                      <version>${error-prone-support.version}</version>
+                    </path>
+                  </annotationProcessorPaths>
+                </configuration>
+              </execution>
+            </executions>
+          </plugin>
+        </plugins>
+      </build>
+    </profile>
+    <profile>
+      <id>error-prone-test-compile</id>
+      <build>
+        <plugins>
+          <plugin>
+            <groupId>org.apache.maven.plugins</groupId>
+            <artifactId>maven-compiler-plugin</artifactId>
+            <version>${maven.compiler.plugin.version}</version>
+            <executions>
+              <!-- Skip the default-testCompile execution as we don't want to execute the testCompile goal twice -->
+              <execution>
+                <id>default-testCompile</id>
+                <phase>test-compile</phase>
+                <goals>
+                  <goal>testCompile</goal>
+                </goals>
+                <configuration>
+                  <skip>true</skip>
+                </configuration>
+              </execution>
+              <execution>
+                <id>error-prone-test-compile</id>
+                <phase>test-compile</phase>
+                <goals>
+                  <goal>testCompile</goal>
+                </goals>
+                <configuration>
+                  <failOnError>false</failOnError>
+                  <source>${java.version}</source>
+                  <target>${java.version}</target>
+                  <compilerArgs>
+                    <arg>-Xpkginfo:always</arg>
+                    <arg>-XDcompilePolicy=simple</arg>
+                    <arg>
+                      -Xplugin:ErrorProne \
+
+                      ${error-prone.flags}
+                    </arg>
+                  </compilerArgs>
+                  <annotationProcessorPaths>
+                    <path>
+                      <groupId>com.github.PicnicSupermarket.error-prone</groupId>
+                      <artifactId>error_prone_core</artifactId>
+                      <version>${error-prone.version}</version>
+                    </path>
+                    <path>
+                      <groupId>tech.picnic.error-prone-support</groupId>
+                      <artifactId>error-prone-contrib</artifactId>
+                      <version>${error-prone-support.version}</version>
+                    </path>
+                    <path>
+                      <groupId>tech.picnic.error-prone-support</groupId>
+                      <artifactId>refaster-runner</artifactId>
+                      <version>${error-prone-support.version}</version>
+                    </path>
+                  </annotationProcessorPaths>
+                </configuration>
+              </execution>
+            </executions>
+          </plugin>
+        </plugins>
+      </build>
+    </profile>
+    <profile>
+      <id>sonatype-oss-release</id>
+      <build>
+        <plugins>
+          <plugin>
+            <groupId>org.apache.maven.plugins</groupId>
+            <artifactId>maven-source-plugin</artifactId>
+            <version>${maven-source-plugin.version}</version>
+            <executions>
+              <execution>
+                <id>attach-sources</id>
+                <goals>
+                  <goal>jar-no-fork</goal>
+                </goals>
+              </execution>
+            </executions>
+          </plugin>
+          <plugin>
+            <groupId>org.apache.maven.plugins</groupId>
+            <artifactId>maven-javadoc-plugin</artifactId>
+            <version>${maven-javadoc-plugin.version}</version>
+            <executions>
+              <execution>
+                <id>attach-javadocs</id>
+                <goals>
+                  <goal>jar</goal>
+                </goals>
+              </execution>
+            </executions>
+          </plugin>
+          <plugin>
+            <groupId>org.apache.maven.plugins</groupId>
+            <artifactId>maven-gpg-plugin</artifactId>
+            <version>1.6</version>
+            <executions>
+              <execution>
+                <id>sign-artifacts</id>
+                <phase>verify</phase>
+                <goals>
+                  <goal>sign</goal>
+                </goals>
+              </execution>
+            </executions>
+          </plugin>
+        </plugins>
       </build>
     </profile>
     <profile>
